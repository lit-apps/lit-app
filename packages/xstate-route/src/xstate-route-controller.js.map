{"version":3,"file":"xstate-route-controller.js","sourceRoot":"","sources":["xstate-route-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { ReactiveController, ReactiveControllerHost } from 'lit';\nimport { RouterSlot, GLOBAL_ROUTER_EVENTS_TARGET, WillChangeStateEvent, matchRoutes, constructAbsolutePath, ChangeStateEvent } from 'router-slot';\nimport type { AnyStateMachine, Actor } from 'xstate';\n\n\nexport class RouteStateController implements ReactiveController {\n\tprivate unsubscribe!: () => void | undefined;\n\tprivate _preventHistoryChange: boolean = false;\n\tprivate _preventSetState: boolean = false;\n\tprivate _nextState: string = '';\n\tconstructor(\n\t\tprotected host: ReactiveControllerHost,\n\t\tprotected actorState: Actor<AnyStateMachine>,\n\t\tprotected routerSlot: RouterSlot\n\t) {\n\t\thost.addController(this);\n\t}\n\n\tprivate subscribe() {\n\n\t\t// confirmNavigation will cancel the navigation if the machine cannot enter the state. \n\t\tconst confirmNavigation = (e: WillChangeStateEvent) => {\n\t\t\tif (this._preventSetState) {\n\t\t\t\treturn true\n\t\t\t}\n\n\t\t\tconst match = getMatchedRoute(this.routerSlot, e.detail.url!);\n\t\t\tif (import.meta.env.DEV) {\n\t\t\t\tconsole.log('Controller - ConfirmNavigation - match:', match);\n\t\t\t}\n\t\t\tconst xstate = match?.route.data?.xstate;\n\t\t\tif (xstate) {\n\t\t\t\ttry {\n\t\t\t\t\t// temporarily set the next state so that we know what to navigate to\n\t\t\t\t\tthis._nextState = xstate;\n\t\t\t\t\tconst sn = this.actorState.getSnapshot();\n\t\t\t\t\tconst can = sn.can({ type: `xstate.route.${xstate}` });\n\t\t\t\t\tif (can) {\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t\te.preventDefault()\n\t\t\t\t\treturn false\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis._preventHistoryChange = false;\n\t\t\t\t\tconsole.error('Error while changing state', error);\n\t\t\t\t\te.preventDefault()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true\n\t\t}\n\t\tGLOBAL_ROUTER_EVENTS_TARGET.addEventListener('willchangestate', confirmNavigation);\n\n\t\t// when the route changes, try to sync existing context ids to the actor state\n\t\t// the convention is to add a `context.[key]` event that will assign the value \n\t\t// of the route param to the actor state.\n\t\tconst changeState = (e: ChangeStateEvent) => {\n\t\t\tif (import.meta.env.DEV) {\n\t\t\t\tconsole.log('Controller - changestate - detail:', e.detail);\n\t\t\t\tconsole.log('Controller - changestate - path name:', window.location.pathname);\n\t\t\t}\n\t\t\tconst match = this.routerSlot.match;\n\n\t\t\tthis._preventHistoryChange = true;\n\t\t\tif (this._nextState) {\n\t\t\t\tthis.actorState.send({ type: `xstate.route.${this._nextState}` });\n\t\t\t\tthis._nextState = '';\n\t\t\t}\n\t\t\tif (match?.params) {\n\t\t\t\tfor (const key in match.params) {\n\t\t\t\t\tconst value = match.params[key];\n\t\t\t\t\tthis.actorState.send({ type: `context.${key}`, params: { [key]: value } })\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._preventHistoryChange = false;\n\t\t}\n\t\tthis.routerSlot.addEventListener('changestate', changeState);\n\n\t\t// subscribe to the actor state - set the route when route config is set\n\t\tconst subscription = this.actorState.subscribe((snap) => {\n\t\t\tif (this._preventHistoryChange) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t// grab the last node config\n\t\t\tconst nodeConfig = snap._nodes[snap._nodes.length - 1]\n\t\t\tif (nodeConfig?.config?.route) {\n\t\t\t\t// find the route in the routerSlot build the path and navigate to it\n\t\t\t\tconst route = this.routerSlot.routes.find(r => snap.matches(r.data.xstate))\n\t\t\t\tif (route) {\n\t\t\t\t\tif (import.meta.env.DEV) {\n\t\t\t\t\t\tconsole.log('Controller - subscribe - route:', route)\n\t\t\t\t\t}\n\t\t\t\t\tconst path = constructAbsolutePath(this.routerSlot, route.path.replace(/:(\\w+)/g, (match, paramName) => {\n\t\t\t\t\t\tconst contextValue = snap.context[paramName];\n\t\t\t\t\t\treturn contextValue !== undefined ? String(contextValue) : match;\n\t\t\t\t\t}));\n\t\t\t\t\tthis._preventSetState = true;\n\t\t\t\t\tconsole.log('Controller - subscribe - path:', path)\n\t\t\t\t\twindow.history.pushState({}, '', path);\n\t\t\t\t\tthis._preventSetState = false;\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\t// we still need to sync the state with the current route\n\t\tconst match = getMatchedRoute(this.routerSlot);\n\t\tconst xstate = match?.route.data?.xstate;\n\t\tif (xstate) {\n\t\t\tthis._preventHistoryChange = true;\n\t\t\tthis.actorState.send({ type: `xstate.route.${xstate}` });\n\t\t\tthis._preventHistoryChange = false;\n\t\t}\n\n\t\treturn () => {\n\t\t\tsubscription.unsubscribe()\n\t\t\tthis.routerSlot?.removeEventListener('changestate', changeState);\n\t\t\tGLOBAL_ROUTER_EVENTS_TARGET.removeEventListener('willchangestate', confirmNavigation);\n\t\t}\n\t}\n\n\thostConnected(): void {\n\t\tthis.unsubscribe = this.subscribe()\n\t}\n\thostDisconnected(): void {\n\t\tthis.unsubscribe?.();\n\t}\n}\n\n\nfunction getMatchedRoute(routerSlot: RouterSlot, url?: string) {\n\tconst parentPath = constructAbsolutePath(routerSlot);\n\turl ??= window.location.pathname;\n\t// get path fragments already consumed by parents\n\tconst rest = url.replace(parentPath, '');\n\treturn matchRoutes(routerSlot.routes, rest);\n}\n"]}